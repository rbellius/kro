apiVersion: kro.run/v1alpha1
kind: ResourceGraphDefinition
metadata:
  name: s3controller.kro.run
  namespace: kro
spec:
  schema:
    apiVersion: v1alpha1
    kind: S3Controller
    spec:
      name: string | default=ack-s3-controller
      namespace: string | default=default
      values:
        aws:
          accountID: string | required=true
          region: string | default=us-west-2
        deployment:
          containerPort: integer | default=8080
          replicas: integer | default=1
        iamRole:
          maxSessionDuration: integer | default=3600
          oidcProvider: string | required=true
          roleDescription: string | default=IRSA role for ACK S3 controller deployment on EKS cluster using kro Resource group
        iamPolicy:
          description: string | default="policy for ack-s3 controller"
        image:
          deletePolicy: string | default=delete
          repository: string | default=public.ecr.aws/aws-controllers-k8s/s3-controller
          tag: string | default=1.0.18
          resources:
            requests:
              memory: string | default=200Mi
              cpu: string | default=100m
            limits:
              memory: string | default=300Mi
              cpu: string | default=100m
        log:
          enabled: boolean | default=false
          level: string | default=info
        serviceAccount:
          name: string | default=ack-s3-controller-sa
  resources:
  - id: s3CRDGroup
    template:
      apiVersion: kro.run/v1alpha1
      kind: S3CRDGroup
      metadata:
        name: ${schema.spec.name}-crd-group
      spec:
        name: ${schema.spec.name}-crd-group
  - id: s3ControllerIamPolicy
    template:
      apiVersion: iam.services.k8s.aws/v1alpha1
      kind: Policy
      metadata:
        name: ${schema.spec.name}-iam-policy
      spec:
        name: ${schema.spec.name}-iam-policy
        description: ${schema.spec.values.iamPolicy.description}
        policyDocument: >
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Sid": "S3AllPermission",
                "Effect": "Allow",
                "Action": [
                  "s3:*",
                  "s3-object-lambda:*"
                ],
                "Resource": "*"
              },
              {
                "Sid": "S3ReplicationPassRole",
                "Condition": {
                  "StringEquals": {
                    "iam:PassedToService": "s3.amazonaws.com"
                  }
                },
                "Action": "iam:PassRole",
                "Resource": "*",
                "Effect": "Allow"
              }
            ]
          }
  - id: s3ControllerIamRole
    template:
      apiVersion: iam.services.k8s.aws/v1alpha1
      kind: Role
      metadata:
        name: ${schema.spec.name}-iam-role
        namespace: ${schema.spec.namespace}
      spec:
        name: ${schema.spec.name}-iam-role
        description: ${schema.spec.values.iamRole.roleDescription}
        maxSessionDuration: ${schema.spec.values.iamRole.maxSessionDuration}
        policies:
        - ${s3ControllerIamPolicy.status.ackResourceMetadata.arn}
        assumeRolePolicyDocument: >
          {
            "Version":"2012-10-17",
            "Statement": [{
              "Effect":"Allow",
              "Principal": {"Federated": "arn:aws:iam::${schema.spec.values.aws.accountID}:oidc-provider/${schema.spec.values.iamRole.oidcProvider}"},
              "Action": ["sts:AssumeRoleWithWebIdentity"],
              "Condition": {
                "StringEquals": {"${schema.spec.values.iamRole.oidcProvider}:sub": "system:serviceaccount:${schema.spec.namespace}:${schema.spec.values.serviceAccount.name}"}
              }
            }]
          }
  - id: serviceAccount
    template:
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: ${schema.spec.values.serviceAccount.name}
        namespace: ${schema.spec.namespace}
        annotations:
          eks.amazonaws.com/role-arn: ${s3ControllerIamRole.status.ackResourceMetadata.arn}
  - id: deployment
    template:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: ${schema.spec.name}-deployment
        namespace: ${schema.spec.namespace}
        labels:
          app.kubernetes.io/name: ${schema.spec.name}-deployment
          app.kubernetes.io/instance: ${schema.spec.name}
      spec:
        replicas: ${schema.spec.values.deployment.replicas}
        selector:
          matchLabels:
            app.kubernetes.io/name: ${schema.spec.name}-deployment
            app.kubernetes.io/instance: ${schema.spec.name}
        template:
          metadata:
            labels:
              app.kubernetes.io/name: ${schema.spec.name}-deployment
              app.kubernetes.io/instance: ${schema.spec.name}
          spec:
            serviceAccountName: ${serviceAccount.metadata.name}
            containers:
            - name: controller
              image: ${schema.spec.values.image.repository}:${schema.spec.values.image.tag}
              imagePullPolicy: Always
              command:
              - ./bin/controller
              args:
              - --aws-region
              - ${schema.spec.values.aws.region}
              - --enable-development-logging=${schema.spec.values.log.enabled}
              - --log-level
              - ${schema.spec.values.log.level}
              - --deletion-policy
              - ${schema.spec.values.image.deletePolicy}
              - --watch-namespace
              - ${schema.spec.namespace}
              ports:
              - name: http
                containerPort: ${schema.spec.values.deployment.containerPort}
              resources:
                requests:
                  memory: ${schema.spec.values.image.resources.requests.memory}
                  cpu: ${schema.spec.values.image.resources.requests.cpu}
                limits:
                  memory: ${schema.spec.values.image.resources.limits.memory}
                  cpu: ${schema.spec.values.image.resources.limits.cpu}
              env:
              - name: ACK_SYSTEM_NAMESPACE
                value: ${schema.spec.namespace}
              - name: AWS_REGION
                value: ${schema.spec.values.aws.region}
              - name: DELETE_POLICY
                value: ${schema.spec.values.image.deletePolicy}
              - name: ACK_LOG_LEVEL
                value: ${schema.spec.values.log.level}
  - id: clusterRoleBinding
    template:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: ${schema.spec.name}-clusterrolebinding
      roleRef:
        kind: ClusterRole
        apiGroup: rbac.authorization.k8s.io
        name: ${schema.spec.name}-clusterrole
      subjects:
      - kind: ServiceAccount
        name: ${serviceAccount.metadata.name}
        namespace: ${serviceAccount.metadata.namespace}
  - id: clusterRole
    template:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: ${schema.spec.name}-clusterrole
      rules:
      - apiGroups:
        - ""
        resources:
        - configmaps
        - secrets
        verbs:
        - get
        - list
        - patch
        - watch
      - apiGroups:
        - ""
        resources:
        - namespaces
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - s3.services.k8s.aws
        resources:
        - buckets
        verbs:
        - create
        - delete
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - s3.services.k8s.aws
        resources:
        - buckets/status
        verbs:
        - get
        - patch
        - update
      - apiGroups:
        - services.k8s.aws
        resources:
        - adoptedresources
        - fieldexports
        verbs:
        - create
        - delete
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - services.k8s.aws
        resources:
        - adoptedresources/status
        - fieldexports/status
        verbs:
        - get
        - patch
        - update
