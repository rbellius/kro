apiVersion: kro.run/v1alpha1
kind: ResourceGraphDefinition
metadata:
  name: ack-controllers.kro.run
  namespace: kro
spec:
  schema:
    apiVersion: v1alpha1
    kind: AckControllers
    spec:
      name: string | default=ack-controllers
      namespace: string | default=default
      values:
        aws:
          accountID: string | required=true
          region: string | default=us-west-2
        deployment:
          containerPort: integer | default=8080
          replicas: integer | default=1
        iam:
          enabled: boolean | default=false
          iamRole:
            maxSessionDuration: integer | default=3600
            oidcProvider: string | required=true
            roleDescription: string | default=IRSA role for ACK controllers deployment on EKS cluster using Kro ResourceGraphDefinition
          repository: string | default=public.ecr.aws/aws-controllers-k8s/iam-controller
          tag: string | default=1.3.13
          serviceAccount:
            name: string | default=iam-controller-sa
            roleArn: string | required=true
        ec2:
          enabled: boolean | default=true
          repository: string | default=public.ecr.aws/aws-controllers-k8s/ec2-controller
          tag: string | default=1.2.27
          serviceAccount:
            name: string | default=ec2-controller-sa
        eks:
          enabled: boolean | default=true
          repository: string | default=public.ecr.aws/aws-controllers-k8s/eks-controller
          tag: string | default=1.4.7
          serviceAccount:
            name: string | default=eks-controller-sa
        s3:
          enabled: boolean | default=true
          repository: string | default=public.ecr.aws/aws-controllers-k8s/s3-controller
          tag: string | default=1.0.18
          serviceAccount:
            name: string | default=s3-controller-sa
        ecr:
          enabled: boolean | default=true
          repository: string | default=public.ecr.aws/aws-controllers-k8s/ecr-controller
          tag: string | default=1.0.19
          serviceAccount:
            name: string | default=ecr-controller-sa
        ecrpublic:
          enabled: boolean | default=true
          repository: string | default=public.ecr.aws/aws-controllers-k8s/ecrpublic-controller
          tag: string | default=1.0.0
          serviceAccount:
            name: string | default=ecrpublic-controller-sa
        sqs:
          enabled: boolean | default=true
          repository: string | default=public.ecr.aws/aws-controllers-k8s/sqs-controller
          tag: string | default=1.1.2
          serviceAccount:
            name: string | default=sqs-controller-sa
            
        imageConfig:
          deletePolicy: string | default=delete
          resources:
            requests:
              memory: string | default=64Mi
              cpu: string | default=50m
            limits:
              memory: string | default=128Mi
              cpu: string | default=100m
        log:
          enabled: boolean | default=false
          level: string | default=info

  resources:
  - id: iamController
    includeWhen:
    - ${schema.spec.values.iam.enabled} 
    template:
      apiVersion: kro.run/v1alpha1
      kind: IAMController
      metadata:
        name: ${schema.spec.name}-iam-controller
        namespace: ${schema.spec.namespace}
      spec:
        name: ${schema.spec.name}-iam-controller
        namespace: ${schema.spec.namespace}
        values:
          aws:
            region: ${schema.spec.values.aws.region}
          deployment:
            containerPort: ${schema.spec.values.deployment.containerPort}
            replicas: ${schema.spec.values.deployment.replicas}
          image:
            deletePolicy: ${schema.spec.values.imageConfig.deletePolicy}
            repository: ${schema.spec.values.iam.repository}
            tag: ${schema.spec.values.iam.tag}
            resources:
              requests:
                memory: ${schema.spec.values.imageConfig.resources.requests.memory}
                cpu: ${schema.spec.values.imageConfig.resources.requests.cpu}
              limits:
                memory: ${schema.spec.values.imageConfig.resources.limits.memory}
                cpu: ${schema.spec.values.imageConfig.resources.limits.cpu}
          log:
            enabled: ${schema.spec.values.log.enabled}
            level: ${schema.spec.values.log.level}
          serviceAccount:
            name: ${schema.spec.values.iam.serviceAccount.name}
            roleArn: ${schema.spec.values.iam.serviceAccount.roleArn}
  - id: ec2Controller
    includeWhen:
    - ${schema.spec.values.ec2.enabled}
    template:
      apiVersion: kro.run/v1alpha1
      kind: EC2Controller
      metadata:
        name: ${schema.spec.name}-ec2-controller
        namespace: ${schema.spec.namespace}
      spec:
        name: ${schema.spec.name}-ec2-controller
        namespace: ${schema.spec.namespace}
        values:
          aws:
            accountID: ${schema.spec.values.aws.accountID}
            region: ${schema.spec.values.aws.region}
          deployment:
            containerPort: ${schema.spec.values.deployment.containerPort}
            replicas: ${schema.spec.values.deployment.replicas}
          iamRole:
            maxSessionDuration: ${schema.spec.values.iam.iamRole.maxSessionDuration}
            oidcProvider: ${schema.spec.values.iam.iamRole.oidcProvider}
            roleDescription: ${schema.spec.values.iam.iamRole.roleDescription}
          image:
            deletePolicy: ${schema.spec.values.imageConfig.deletePolicy}
            repository: ${schema.spec.values.ec2.repository}
            tag: ${schema.spec.values.ec2.tag}
            resources:
              requests:
                memory: ${schema.spec.values.imageConfig.resources.requests.memory}
                cpu: ${schema.spec.values.imageConfig.resources.requests.cpu}
              limits:
                memory: ${schema.spec.values.imageConfig.resources.limits.memory}
                cpu: ${schema.spec.values.imageConfig.resources.limits.cpu}
          log:
            enabled: ${schema.spec.values.log.enabled}
            level: ${schema.spec.values.log.level}
          serviceAccount:
            name: ${schema.spec.values.ec2.serviceAccount.name}
  - id: eksController
    includeWhen:
    - ${schema.spec.values.eks.enabled}
    template:
      apiVersion: kro.run/v1alpha1
      kind: EKSController
      metadata:
        name: ${schema.spec.name}-eks-controller
        namespace: ${schema.spec.namespace}
      spec:
        name: ${schema.spec.name}-eks-controller
        namespace: ${schema.spec.namespace}
        values:
          aws:
            accountID: ${schema.spec.values.aws.accountID}
            region: ${schema.spec.values.aws.region}
          deployment:
            containerPort: ${schema.spec.values.deployment.containerPort}
            replicas: ${schema.spec.values.deployment.replicas}
          iamRole:
            maxSessionDuration: ${schema.spec.values.iam.iamRole.maxSessionDuration}
            oidcProvider: ${schema.spec.values.iam.iamRole.oidcProvider}
            roleDescription: ${schema.spec.values.iam.iamRole.roleDescription}
          iamPolicy:
            description: ${schema.spec.values.iam.iamRole.roleDescription}
          image:
            deletePolicy: ${schema.spec.values.imageConfig.deletePolicy}
            repository: ${schema.spec.values.eks.repository}
            tag: ${schema.spec.values.eks.tag}
            resources:
              requests:
                memory: ${schema.spec.values.imageConfig.resources.requests.memory}
                cpu: ${schema.spec.values.imageConfig.resources.requests.cpu}
              limits:
                memory: ${schema.spec.values.imageConfig.resources.limits.memory}
                cpu: ${schema.spec.values.imageConfig.resources.limits.cpu}
          log:
            enabled: ${schema.spec.values.log.enabled}
            level: ${schema.spec.values.log.level}
          serviceAccount:
            name: ${schema.spec.values.eks.serviceAccount.name}
  - id: sqsController
    includeWhen:
    - ${schema.spec.values.sqs.enabled}
    template:
      apiVersion: kro.run/v1alpha1
      kind: SQSController
      metadata:
        name: ${schema.spec.name}-sqs-controller
        namespace: ${schema.spec.namespace}
      spec:
        name: ${schema.spec.name}-sqs-controller
        namespace: ${schema.spec.namespace}
        values:
          aws:
            accountID: ${schema.spec.values.aws.accountID}
            region: ${schema.spec.values.aws.region}
          deployment:
            containerPort: ${schema.spec.values.deployment.containerPort}
            replicas: ${schema.spec.values.deployment.replicas}
          iamRole:
            maxSessionDuration: ${schema.spec.values.iam.iamRole.maxSessionDuration}
            oidcProvider: ${schema.spec.values.iam.iamRole.oidcProvider}
            roleDescription: ${schema.spec.values.iam.iamRole.roleDescription}
          iamPolicy:
            description: ${schema.spec.values.iam.iamRole.roleDescription}
          image:
            deletePolicy: ${schema.spec.values.imageConfig.deletePolicy}
            repository: ${schema.spec.values.sqs.repository}
            tag: ${schema.spec.values.sqs.tag}
            resources:
              requests:
                memory: ${schema.spec.values.imageConfig.resources.requests.memory}
                cpu: ${schema.spec.values.imageConfig.resources.requests.cpu}
              limits:
                memory: ${schema.spec.values.imageConfig.resources.limits.memory}
                cpu: ${schema.spec.values.imageConfig.resources.limits.cpu}
          log:
            enabled: ${schema.spec.values.log.enabled}
            level: ${schema.spec.values.log.level}
          serviceAccount:
            name: ${schema.spec.values.sqs.serviceAccount.name}
  - id: s3Controller
    includeWhen:
    - ${schema.spec.values.s3.enabled}
    template:
      apiVersion: kro.run/v1alpha1
      kind: S3Controller
      metadata:
        name: ${schema.spec.name}-s3-controller
        namespace: ${schema.spec.namespace}
      spec:
        name: ${schema.spec.name}-s3-controller
        namespace: ${schema.spec.namespace}
        values:
          aws:
            accountID: ${schema.spec.values.aws.accountID}
            region: ${schema.spec.values.aws.region}
          deployment:
            containerPort: ${schema.spec.values.deployment.containerPort}
            replicas: ${schema.spec.values.deployment.replicas}
          iamRole:
            maxSessionDuration: ${schema.spec.values.iam.iamRole.maxSessionDuration}
            oidcProvider: ${schema.spec.values.iam.iamRole.oidcProvider}
            roleDescription: ${schema.spec.values.iam.iamRole.roleDescription}
          iamPolicy:
            description: ${schema.spec.values.iam.iamRole.roleDescription}
          image:
            deletePolicy: ${schema.spec.values.imageConfig.deletePolicy}
            repository: ${schema.spec.values.s3.repository}
            tag: ${schema.spec.values.s3.tag}
            resources:
              requests:
                memory: ${schema.spec.values.imageConfig.resources.requests.memory}
                cpu: ${schema.spec.values.imageConfig.resources.requests.cpu}
              limits:
                memory: ${schema.spec.values.imageConfig.resources.limits.memory}
                cpu: ${schema.spec.values.imageConfig.resources.limits.cpu}
          log:
            enabled: ${schema.spec.values.log.enabled}
            level: ${schema.spec.values.log.level}
          serviceAccount:
            name: ${schema.spec.values.s3.serviceAccount.name}
  - id: ecrController
    includeWhen:
    - ${schema.spec.values.ecr.enabled}
    template:
      apiVersion: kro.run/v1alpha1
      kind: ECRController
      metadata:
        name: ${schema.spec.name}-ecr-controller
        namespace: ${schema.spec.namespace}
      spec:
        name: ${schema.spec.name}-ecr-controller
        namespace: ${schema.spec.namespace}
        values:
          aws:
            accountID: ${schema.spec.values.aws.accountID}
            region: ${schema.spec.values.aws.region}
          deployment:
            containerPort: ${schema.spec.values.deployment.containerPort}
            replicas: ${schema.spec.values.deployment.replicas}
          iamRole:
            maxSessionDuration: ${schema.spec.values.iam.iamRole.maxSessionDuration}
            oidcProvider: ${schema.spec.values.iam.iamRole.oidcProvider}
            roleDescription: ${schema.spec.values.iam.iamRole.roleDescription}
          iamPolicy:
            description: ${schema.spec.values.iam.iamRole.roleDescription}
          image:
            deletePolicy: ${schema.spec.values.imageConfig.deletePolicy}
            repository: ${schema.spec.values.ecr.repository}
            tag: ${schema.spec.values.ecr.tag}
            resources:
              requests:
                memory: ${schema.spec.values.imageConfig.resources.requests.memory}
                cpu: ${schema.spec.values.imageConfig.resources.requests.cpu}
              limits:
                memory: ${schema.spec.values.imageConfig.resources.limits.memory}
                cpu: ${schema.spec.values.imageConfig.resources.limits.cpu}
          log:
            enabled: ${schema.spec.values.log.enabled}
            level: ${schema.spec.values.log.level}
          serviceAccount:
            name: ${schema.spec.values.ecr.serviceAccount.name}
  - id: ecrPublicController
    includeWhen:
    - ${schema.spec.values.ecrpublic.enabled}
    template:
      apiVersion: kro.run/v1alpha1
      kind: ECRPublicController
      metadata:
        name: ${schema.spec.name}-ecrpublic-controller
        namespace: ${schema.spec.namespace}
      spec:
        name: ${schema.spec.name}-ecrpublic-controller
        namespace: ${schema.spec.namespace}
        values:
          aws:
            accountID: ${schema.spec.values.aws.accountID}
            region: ${schema.spec.values.aws.region}
          deployment:
            containerPort: ${schema.spec.values.deployment.containerPort}
            replicas: ${schema.spec.values.deployment.replicas}
          iamRole:
            maxSessionDuration: ${schema.spec.values.iam.iamRole.maxSessionDuration}
            oidcProvider: ${schema.spec.values.iam.iamRole.oidcProvider}
            roleDescription: ${schema.spec.values.iam.iamRole.roleDescription}
          iamPolicy:
            description: ${schema.spec.values.iam.iamRole.roleDescription}
          image:
            deletePolicy: ${schema.spec.values.imageConfig.deletePolicy}
            repository: ${schema.spec.values.ecrpublic.repository}
            tag: ${schema.spec.values.ecrpublic.tag}
            resources:
              requests:
                memory: ${schema.spec.values.imageConfig.resources.requests.memory}
                cpu: ${schema.spec.values.imageConfig.resources.requests.cpu}
              limits:
                memory: ${schema.spec.values.imageConfig.resources.limits.memory}
                cpu: ${schema.spec.values.imageConfig.resources.limits.cpu}
          log:
            enabled: ${schema.spec.values.log.enabled}
            level: ${schema.spec.values.log.level}
          serviceAccount:
            name: ${schema.spec.values.ecrpublic.serviceAccount.name}
